

65  64  63  62  61  60  59  58  57
66  37  36  35  34  33  32  31  56
67  38  17  16  15  14  13  30  55
68  39  18   5   4   3  12  29  54
69  40  19   6   1   2  11  28  53
70  41  20   7   8   9  10  27  52
71  42  21  22  23  24  25  26  51
72  43  44  45  46  47  48  49  50
73  74  75  76  77  78  79  80  81 82


r is radius, starting at 0

# square size

for width of each square, it increments 2 for each iteration
w = 1, 3, 5, ...
w = (r * 2) + 1

# number of values in each square of radius _r_

r=0, t=1
r=8, t=8
r=16, t=16
t = (w - 1) * 4
t = (r * 2) * 4
t = r * 8


# end value of each square

1,    9,    25,   49,   81
1
      8+1
            16+9
                  24+25
                        32+49
                             40+81

s(r) = t(r) + s(r-1)

def sval(r):
  p = (1 if r == 0 else sval(r - 1))
  return r * 8 + p


# start value of each square

nb, this does not work, kept in case i need to fix it later

1,    2,    10,   26,   50
1     |     |     |     |
      1 + 1 |     |     |
            8 + 2 |     |
                  16 + 10
                        24 + 26
s(r) = t(r-1) + s(r-1)

def sval(r):
  if r == 0:
    return 1
  return (r - 1) * 8 + sval(r - 1)


# path thoughts

Manhattan distance is Cartesian offsets x + y from center

each radii can be split into four "w" length segments.
for each one of these, one of the x or y offset is the same as the
radius, and the other is the offset from the center of that segment.
these segments are always odd lengths.

so, discover r for a value.
discover which of the four segments it is in.
calculate offset from center of segment.


# position on a segment

using end value for radius

input = 14
__                                              __
 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
xx x0  0 0  01 1  1  1  12 22 22 22 23 33 33 33 4x
 0  1  2  3  4  5  6  7  8  9 10 11 12 13 13 14 16

 r = 2
 width = 5



0 1 2 3 4

-2 -1 0 1 2
